# Specifies the Docker Compose file version
version: '3.7'
# Declares volumes that can be used by services in the Docker Compose file
volumes: 
  # Declares a volume named grafana_data
  grafana_data: {}
# Defines networks that can be used by services in the Docker Compose file
networks:
  # Declares a network named front-tier
  front-tier:
  # Declares a network named back-tier
  back-tier:
# Defines the services that make up your app
services:
  # Defines a service named db
  database:
    # Specifies the Docker image to use for this service
    image: postgres
    # this makes postgres run on old docker versions
    privileged: true
    # Ensures that the service is always restarted if it stops
    restart: always
    # Sets environment variables for the service
    environment:
      # Sets the password for the Postgres database
      POSTGRES_PASSWORD: example
    # Maps ports between the host and the container
    ports:
      - "5432:5432"
    # Specifies the networks that this service is part of
    networks:
      - back-tier
  postgres-exporter:
    #image: wrouesnel/postgres_exporter
    image: prometheuscommunity/postgres-exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:example@database:5432/test?sslmode=disable
      #- PG_EXPORTER_EXTEND_QUERY_PATH=/etc/postgres_exporter/custom_queries.yml
    volumes:
      - ./queries.yml:/etc/postgres-exporter/queries.yml
    ports:
      - "9187:9187"
    depends_on:
      - database
    networks:
      - back-tier

  # sql_exporter:
  #   image: burningalchemist/sql_exporter  # Use the burningalchemist/sql_exporter image
  #   container_name: sql_exporter
  #   ports:
  #     - "9104:9104"  # Expose metrics on port 9104
  #   #volumes:
  #   #  - ./sql_exporter.yml:/etc/sql_exporter/sql_exporter.yml  # Mount the configuration file
  #   networks:
  #     - back-tier
  #   #environment:
  #   #  - SQL_EXPORTER_CONFIG_PATH=/etc/sql_exporter/sql_exporter.yml  # Specify the location of the config file inside the container
  #   restart: always
  #   depends_on:
  #     - database

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - postgres-exporter
    #  - sql_exporter
    networks:
      - back-tier

  alertmanager:
    image: prom/alertmanager
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
    ports:
      - "9093:9093"
    depends_on:
      - prometheus
    networks:
      - back-tier

  # Defines a service named adminer
  adminer:
    image: adminer
    restart: always
    ports:
      - "8090:8080"
    networks:
      - back-tier
      - front-tier  
  # Defines a service named grafana
  grafana:
    image: grafana/grafana
    # Sets the user ID under which the service will run
    user: "472"
    ports:
      - "3000:3000"
    # Maps local directories or files to directories inside the container
    #volumes:
      # Persist Grafana data (dashboards, alerting, etc.)
      #- ./grafana_data:/var/lib/grafana
      # Optionally mount a local directory for custom provisioning files (datasources, dashboards, etc.)
      #- ./grafana_config:/etc/grafana/provisioning
      #- ./grafana_dashboards:/etc/grafana/dashboards
      # Maps a local file to a file inside the container, and makes it read-only
      #- ./grafana_config/grafana_datasources.yaml:/etc/grafana/provisioning/datasources/datasource.yaml:ro
    networks:
      - back-tier
      - front-tier
    restart: always