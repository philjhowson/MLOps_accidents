# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python
name: Python application

on:
  push:
    branches: [ "cicd" ]
  pull_request:
    branches: [ "cicd" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    # - name: Lint with flake8
    #   run: |
    #     # stop the build if there are Python syntax errors or undefined names
    #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Write secrets to DVC config file
      run: |
        echo "['remote \"origin\"']" > .dvc/config.local
        echo "access_key_id = ${{ secrets.PHILJHOWSON_DVC_ACCESS_KEY }}" >> .dvc/config.local
        echo "secret_access_key = ${{ secrets.PHILJHOWSON_DVC_KEY_ID  }}" >> .dvc/config.local
    - name: Run the DVC data pipeline
      run: |
        dvc pull -r origin
        dvc repro
    - name: Build the Docker image for model serving
      run: |
        docker build -f src/docker/Dockerfile.api . -t api_endpoint
        docker-compose -f src/docker/docker-compose.yaml up -d
    - name: Run Pytest
      run: |
        pytest tests/
